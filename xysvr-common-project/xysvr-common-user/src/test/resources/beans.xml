<?xml version="1.0" encoding="UTF-8" ?>

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

    <!-- 打开Spring的Annotation支持 -->
    <context:annotation-config />

    <!-- 设定Spring去哪些包中找Annotation -->
    <context:component-scan base-package="cn.xyspace.xysvr.common" />

    <!-- 加载外部properties配置文件 -->
    <!-- <context:property-placeholder location="classpath:jdbc.properties" /> -->
    <bean class="cn.xyspace.xysvr.common.core.utils.security.EncryptPropertyPlaceholderConfigurer" p:location="classpath:jdbc.properties"
        p:fileEncoding="utf-8" />

    <!-- 配置数据库连接池（druid） -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本信息 -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <property name="minIdle" value="${druid.minIdle}" />
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />
        <!-- 是否打开连接泄露自动检测 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <!-- 连接长时间没有使用，被认为发生泄露时长 -->
        <property name="removeAbandonedTimeoutMillis" value="${druid.removeAbandonedTimeoutMillis}" />
        <!-- 发生泄露时是否需要输出log，建议在开启连接泄露检测时开启，方便排错 -->
        <property name="logAbandoned" value="${druid.logAbandoned}" />
    </bean>

    <!-- 配置Mybatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据源 -->
        <property name="dataSource" ref="druidDataSource" />
        <!-- Mybatis配置文件位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 自动扫描entity包, 省掉在mybatis-config.xml里手工配置 -->
        <property name="typeAliasesPackage" value="cn.xyspace.xysvr.common.user.entity" />
        <!-- Mybatis映射文件位置 -->
        <property name="mapperLocations" value="classpath*:mybatis/*-mapper.xml" />
    </bean>

    <!-- 扫描basePackage下所有以@MyBatisRepository注解标识的接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.xyspace.xysvr.common" />
        <property name="annotationClass" value="cn.xyspace.xysvr.common.core.dao.annotation.MyBatisRepository" />
    </bean>

    <!-- 配置SqlSession模板 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource" />
    </bean>

    <!-- 配置声明式的事务管理（采用基于注解的方式） -->
    <tx:annotation-driven transaction-manager="transactionManager" />

</beans>